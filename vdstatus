#!/usr/bin/python3
# TODO: handle SIGINT properly
# TODO: remove code duplication in plugins, probably use a common class?
# TODO: add documentation / comments
# TODO: add a dummy plugin to use as a starting point
# TODO: interactivity support
import argparse
import configparser
import importlib
import json
import os
import plugins
import sys
import time


DEFAULT_CONFIG = os.path.join(os.environ['HOME'], '.config/vdstatus/conf.ini')


def parse_arguments(arguments=sys.argv[1:]):
    desc = ('A simple i3status replacement, '
            'and more. Warning: WIP, may be broken.')
    p = argparse.ArgumentParser(description=desc)
    p.add_argument('-c', '--config', help='configuration file')

    return p.parse_args(arguments)


def load_plugins(config):
    plugins_loaded = list()
    config.remove_section('main')
    for section in config.sections():
        plugin_name = config.get(section, 'plugin')
        plugin_id = len(plugins_loaded)
        module = importlib.import_module('.' + plugin_name, 'plugins')
        thread_object = module.PluginThread(section, config, plugin_id)
        plugins_loaded.append(thread_object)
    return plugins_loaded


def format_i3wm(inputs):
    return json.dumps(inputs) + ','


def format_term(inputs):
    return_info = list()
    for item in inputs:
        return_info.append(item['full_text'])
    return ' \033[1m|\033[0m '.join(return_info)


def run_plugins(config_file=DEFAULT_CONFIG):
    configuration = configparser.ConfigParser()
    configuration.read(config_file)
    output_format = configuration.get('main', 'format', fallback='term')

    if output_format == 'i3':
        print('{"version":1}\n[', flush=True)
        format_outputs = format_i3wm
    # default to terminal output
    else:
        format_outputs = format_term

    plugins_l = load_plugins(configuration)
    for plugin in plugins_l:
        plugin.start()

    # give plugins some time to fill the outputs
    time.sleep(0.1)

    while True:
        outputs = list()
        try:
            for plugin in plugins_l:
                if not plugin.hide:
                    outputs.append(plugin.status)
            print(format_outputs(outputs), flush=True)
            time.sleep(1)
        except (KeyboardInterrupt, SystemExit):
            for plugin in plugins_l:
                plugin.stop()
            sys.exit('stopping threads...')


if __name__ == '__main__':
    args = parse_arguments()
    if args.config is not None:
        run_plugins(args.config)
    else:
        run_plugins()
